import sqlite3
import traceback

import secret
import systems.pay
from skysmarthack.logger import logAction
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import skysmarthack.buttons
from systems import promocode
from skysmarthack.keyboards import *
from systems.tool_methods import *
from skysmart.task_answer import TaskAnswerObject
from database.sql_configs import cursor, bot_db
from skysmart.skysmart_api import SkySmartApi
from secret import skysmart_token
from aiogram import executor, types
from skysmarthack.loader import dp, bot
from skysmarthack.bot_commands import set_default_commands, commands_list

SSApi = SkySmartApi(skysmart_token)
bills_lifetime = 5

class DeletePromo(StatesGroup):
    id = State()
class ActivatePromo(StatesGroup):
    promocode = State()
class NewPromo(StatesGroup):
    body = State()


#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
async def on_startup(dispatcher):
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id VARCHAR,
            premium INTEGER,
            premium_ends VARCHAR,
            available_answers INTEGER
    );""")
        bot_db.commit()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS promo (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            body VARCHAR,
            description VARCHAR,
            item_id INTEGER,
            usages INTEGER
            );""")
        bot_db.commit()

    except Exception as e:
        print(e)
    print("–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö TELEGRAM API –°–û–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    await set_default_commands(dispatcher)

@dp.message_handler(commands=['buy_answers'])
async def buy_answers(message: types.Message):
    await logAction(buy_answers, True, message)
    registered = userRegister(message.from_user.id)
    if registered:
        text = f"""üí≥ <b>–ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç—ã</b>

üìå 10 –æ—Ç–≤–µ—Ç–æ–≤ - 30‚ÇΩ
üìå 25 –æ—Ç–≤–µ—Ç–æ–≤ - 70‚ÇΩ [-7%]
üìå 50 –æ—Ç–≤–µ—Ç–æ–≤ - 130‚ÇΩ [-14%]
üìå 75 –æ—Ç–≤–µ—Ç–æ–≤ - 180‚ÇΩ [-20%]
üìå 100 –æ—Ç–≤–µ—Ç–æ–≤ - 225‚ÇΩ [-25%]"""
        await message.answer(text, parse_mode="HTML", reply_markup=skysmarthack.buttons.BuyAnswersButtonClient)
    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")

@dp.callback_query_handler(text="buy_100_answers")
async def buy_100_answers_callback(message: types.Message):
    await logAction(buy_100_answers_callback, True, message)
    qiwi = systems.pay.QiwiPayment(secret.qiwi_secret_data["api_belgray_key"])
    count = 100
    amount = 225
    lifetime = bills_lifetime
    chat_id = message["message"]["chat"]["id"]
    bill = await qiwi.buildBill(
        str(message.from_user.id),
        count = count,
        amount = amount,
        comment=f"{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'} –Ω–∞ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SkySmart –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ @skysmarthack_bot.\n\nTG-ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {message.from_user.id}",
        bill_lifetime=lifetime
    )
    if bill[0]:
        PayBillButtonClient = InlineKeyboardMarkup(2)
        pay_bill_button = InlineKeyboardButton(text="ü•ù –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ QIWI", url=bill[1])
        PayBillButtonClient.insert(pay_bill_button)
        await bot.send_message(chat_id=chat_id, text=f"""üí≥ <b>–°—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</b>

üéÅ <b>–¢–æ–≤–∞—Ä:</b> {count} –æ—Ç–≤–µ—Ç–æ–≤
üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ
üïì <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞:</b> {lifetime} –º–∏–Ω.
""", parse_mode="HTML", reply_markup=PayBillButtonClient)
        wait_for_pay = await qiwi.waitForPay(str(message.from_user.id), bill_id=bill[2], count=count)
        if wait_for_pay:
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'}</b>. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - /profile", parse_mode="HTML")
        else:
            await bot.send_message(
                chat_id = chat_id,
                text=f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫."
            )

    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")

@dp.callback_query_handler(text="buy_75_answers")
async def buy_75_answers_callback(message: types.Message):
    await logAction(buy_75_answers_callback, True, message)
    qiwi = systems.pay.QiwiPayment(secret.qiwi_secret_data["api_belgray_key"])
    count = 75
    amount = 180
    lifetime = bills_lifetime
    chat_id = message["message"]["chat"]["id"]
    bill = await qiwi.buildBill(
        str(message.from_user.id),
        count = count,
        amount = amount,
        comment=f"{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'} –Ω–∞ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SkySmart –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ @skysmarthack_bot.\n\nTG-ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {message.from_user.id}",
        bill_lifetime=lifetime
    )
    if bill[0]:
        PayBillButtonClient = InlineKeyboardMarkup(2)
        pay_bill_button = InlineKeyboardButton(text="ü•ù –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ QIWI", url=bill[1])
        PayBillButtonClient.insert(pay_bill_button)
        await bot.send_message(chat_id=chat_id, text=f"""üí≥ <b>–°—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</b>

üéÅ <b>–¢–æ–≤–∞—Ä:</b> {count} –æ—Ç–≤–µ—Ç–æ–≤
üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ
üïì <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞:</b> {lifetime} –º–∏–Ω.
""", parse_mode="HTML", reply_markup=PayBillButtonClient)
        wait_for_pay = await qiwi.waitForPay(str(message.from_user.id), bill_id=bill[2], count=count)
        if wait_for_pay:
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'}</b>. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - /profile", parse_mode="HTML")
        else:
            await bot.send_message(
                chat_id = chat_id,
                text=f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫."
            )

    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")


@dp.callback_query_handler(text="buy_50_answers")
async def buy_50_answers_callback(message: types.Message):
    await logAction(buy_50_answers_callback, True, message)
    qiwi = systems.pay.QiwiPayment(secret.qiwi_secret_data["api_belgray_key"])
    count = 50
    amount = 130
    lifetime = bills_lifetime
    chat_id = message["message"]["chat"]["id"]
    bill = await qiwi.buildBill(
        str(message.from_user.id),
        count = count,
        amount = amount,
        comment=f"{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'} –Ω–∞ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SkySmart –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ @skysmarthack_bot.\n\nTG-ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {message.from_user.id}",
        bill_lifetime=lifetime
    )
    if bill[0]:
        PayBillButtonClient = InlineKeyboardMarkup(2)
        pay_bill_button = InlineKeyboardButton(text="ü•ù –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ QIWI", url=bill[1])
        PayBillButtonClient.insert(pay_bill_button)
        await bot.send_message(chat_id=chat_id, text=f"""üí≥ <b>–°—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</b>

üéÅ <b>–¢–æ–≤–∞—Ä:</b> {count} –æ—Ç–≤–µ—Ç–æ–≤
üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ
üïì <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞:</b> {lifetime} –º–∏–Ω.
""", parse_mode="HTML", reply_markup=PayBillButtonClient)
        wait_for_pay = await qiwi.waitForPay(str(message.from_user.id), bill_id=bill[2], count=count)
        if wait_for_pay:
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'}</b>. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - /profile", parse_mode="HTML")
        else:
            await bot.send_message(
                chat_id = chat_id,
                text=f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫."
            )

    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")

@dp.callback_query_handler(text="buy_25_answers")
async def buy_25_answers_callback(message: types.Message):
    await logAction(buy_25_answers_callback, True, message)
    qiwi = systems.pay.QiwiPayment(secret.qiwi_secret_data["api_belgray_key"])
    count = 25
    amount = 70
    lifetime = bills_lifetime
    chat_id = message["message"]["chat"]["id"]
    bill = await qiwi.buildBill(
        str(message.from_user.id),
        count = count,
        amount = amount,
        comment=f"{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'} –Ω–∞ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SkySmart –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ @skysmarthack_bot.\n\nTG-ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {message.from_user.id}",
        bill_lifetime=lifetime
    )
    if bill[0]:
        PayBillButtonClient = InlineKeyboardMarkup(2)
        pay_bill_button = InlineKeyboardButton(text="ü•ù –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ QIWI", url=bill[1])
        PayBillButtonClient.insert(pay_bill_button)
        await bot.send_message(chat_id=chat_id, text=f"""üí≥ <b>–°—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</b>

üéÅ <b>–¢–æ–≤–∞—Ä:</b> {count} –æ—Ç–≤–µ—Ç–æ–≤
üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ
üïì <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞:</b> {lifetime} –º–∏–Ω.
""", parse_mode="HTML", reply_markup=PayBillButtonClient)
        wait_for_pay = await qiwi.waitForPay(str(message.from_user.id), bill_id=bill[2], count=count)
        if wait_for_pay:
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'}</b>. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - /profile", parse_mode="HTML")
        else:
            await bot.send_message(
                chat_id = chat_id,
                text=f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫."
            )

    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")

@dp.callback_query_handler(text="buy_10_answers")
async def buy_10_answers_callback(message: types.Message):
    await logAction(buy_10_answers_callback, True, message)
    qiwi = systems.pay.QiwiPayment(secret.qiwi_secret_data["api_belgray_key"])
    count = 10
    amount = 30
    lifetime = bills_lifetime
    chat_id = message["message"]["chat"]["id"]
    bill = await qiwi.buildBill(
        str(message.from_user.id),
        count = count,
        amount = amount,
        comment=f"{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'} –Ω–∞ —Ç–µ—Å—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SkySmart –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ @skysmarthack_bot.\n\nTG-ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {message.from_user.id}",
        bill_lifetime=lifetime
    )
    if bill[0]:
        PayBillButtonClient = InlineKeyboardMarkup(2)
        pay_bill_button = InlineKeyboardButton(text="ü•ù –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ QIWI", url=bill[1])
        PayBillButtonClient.insert(pay_bill_button)
        await bot.send_message(chat_id=chat_id, text=f"""üí≥ <b>–°—á–µ—Ç –∫ –æ–ø–ª–∞—Ç–µ</b>

üéÅ <b>–¢–æ–≤–∞—Ä:</b> {count} –æ—Ç–≤–µ—Ç–æ–≤
üí≤ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ
üïì <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞:</b> {lifetime} –º–∏–Ω.
""", parse_mode="HTML", reply_markup=PayBillButtonClient)
        wait_for_pay = await qiwi.waitForPay(str(message.from_user.id), bill_id=bill[2], count=count)
        if wait_for_pay:
            await bot.send_message(chat_id=chat_id, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{count} {'–æ—Ç–≤–µ—Ç(-–∞)' if count < 5 else '–æ—Ç–≤–µ—Ç–æ–≤'}</b>. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - /profile", parse_mode="HTML")
        else:
            await bot.send_message(
                chat_id = chat_id,
                text=f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å—á–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫."
            )

    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")



@dp.message_handler(commands=["tools"])
async def tools(message: types.Message):
    await logAction(tools, True, message)
    registered = userRegister(message.from_user.id)
    is_trusted = isUserTrustedPerson(message.from_user.id)
    if registered:
        if is_trusted:
            await message.answer("""
‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>

–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ü—Ä–æ–º–æ–∫–æ–¥: {id}-{body}-{item_id}
–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {body}-{description}-{item_id}-{usages}
""", parse_mode="HTML", reply_markup=skysmarthack.buttons.ToolsMenuButtonClient)
        else:
            await message.answer("‚≠ï –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –±–æ—Ç–∞ –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
    else:
        await message.answer("‚≠ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!")


@dp.message_handler(commands=["promo"])
async def promo(message: types.Message):
    await logAction(promo, True, message)
    registered = userRegister(message.from_user.id)
    if registered:
        await message.answer("üîë –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
        await ActivatePromo.promocode.set()
    else:
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!")
@dp.message_handler(state=ActivatePromo.promocode)
async def process_promo_body(message: types.Message, state: FSMContext):
    await logAction(process_promo_body, True, message)
    await state.finish()
    full_promocode = message.text
    parts = full_promocode.split("-")
    if len(parts) == 3:
        promo_obj = promocode.AlreadyExistsPromo(full_promocode, message.from_user.id)
        promo_info = promo_obj.get_promo_info()
        if promo_info[0]:
            await message.answer(text=f"""üîë <b>–ü—Ä–æ–º–æ–∫–æ–¥: |{full_promocode}|</b>

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {promo_info[1][2]}
üéÅ –ü—Ä–µ–¥–º–µ—Ç: {promo_obj.item_ids[promo_info[1][3]]["available_answers"]} {"–æ—Ç–≤–µ—Ç–æ–≤" if promo_obj.item_ids[promo_info[1][3]]["available_answers"] > 4  else "–æ—Ç–≤–µ—Ç(-–∞)"}
‚òëÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {promo_info[1][4]}""", parse_mode="HTML", reply_markup=skysmarthack.buttons.ActivatePromoButtonClient)
        else:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        await message.answer("‚ùå –í–∏–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É")

@dp.callback_query_handler(text="activate_promo_button")
async def activate_promo_callback(message: types.Message):
    await logAction(activate_promo_callback, True, message)
    text = message["message"]["text"]
    full_promo_splitting = text.split("|")
    full_promo = full_promo_splitting[1]
    promo_obj = promocode.AlreadyExistsPromo(full_promo, message["from"]["id"])
    promo_use = promo_obj.use_promo()
    if promo_use:
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - /profile")
    else:
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞!")

@dp.callback_query_handler(text="delete_promo")
async def delete_promo_callback(message: types.Message):
    await logAction(delete_promo_callback, True, message)
    registered = userRegister(message.from_user.id)
    is_trusted = isUserTrustedPerson(message.from_user.id)
    if registered and is_trusted:
        await message.answer("üîè –í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await DeletePromo.id.set()

@dp.message_handler(state=DeletePromo.id)
async def process_promo_id(message: types.Message, state: FSMContext):
    await logAction(process_promo_id, True, message)
    await state.finish()
    try:
        int(message.text)
    except:
        return await message.answer(text=f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º!</b>", parse_mode="HTML")
    deleting_promo = promocode.Promo.delete_promo(message.text)
    if deleting_promo:
        await message.answer(text=f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>", parse_mode="HTML")
    else:
        await message.answer(text=f"<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞!</b>", parse_mode="HTML")

@dp.callback_query_handler(text="create_promo")
async def create_promo_callback(message: types.Message):
    await logAction(create_promo_callback, True, message)
    registered = userRegister(message.from_user.id)
    is_trusted = isUserTrustedPerson(message.from_user.id)
    if registered and is_trusted:
        await message.answer("üîè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ body-description-item_id-usages ")
        await NewPromo.body.set()


@dp.message_handler(state=NewPromo.body)
async def process_promo_body(message: types.Message, state: FSMContext):
    await logAction(process_promo_body, True, message)
    await state.finish()
    text = message.text
    split_promo = text.split("-")
    try:
        int(split_promo[2])
        int(split_promo[3])
    except:
        return await message.answer(text=f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É!</b>", parse_mode="HTML")
    if len(split_promo) == 4:
        creating_promo = promocode.Promo.create_promo(message.from_user.id, split_promo[0], split_promo[1], split_promo[2], split_promo[3])
        if creating_promo[0]:
            await message.answer(text=f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ <b>{creating_promo[1]}</b>", parse_mode="HTML")
        else:
            await message.answer(text=f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>", parse_mode="HTML")
    else:
        await message.answer(text=f"<b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É!</b>", parse_mode="HTML")


@dp.message_handler(commands=["profile"])
async def profile(message: types.Message):
    await logAction(profile, True, message)
    registered = userRegister(message.from_user.id)
    cursor.execute("SELECT available_answers FROM users WHERE telegram_id = ?", (str(message.from_user.id),))
    result = cursor.fetchone()
    if result and registered:
        text = f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}

üìå –û—Ç–≤–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {result[0]}
üí≥ –ö—É–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã - /buy_answers
"""
        await message.answer(text)
    else:
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await logAction(start, True, message)
    text = f"""üîπ SkySmartHack - —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±–æ–π —Ç–µ—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã SkySmart. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö.

üì∫ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –±–æ—Ç–∞: https://t.me/skysmarthack
üí° –°–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞: https://vk.com/belgrays

üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - /buy_answers
üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ - /promo
üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å - /profile
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ - /start

üíª –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±–æ—Ç–∞: https://github.com/BelGray/SkySmartHack"""
    await message.answer(text, reply_markup=keyboard_client)

@dp.message_handler()
async def message_handler(message: types.Message):
    await logAction(message_handler, True, message)
    hash_url = SSApi.cut_hash(message["text"])
    user_register = userRegister(str(message.from_user.id))
    if hash_url[0] and user_register:
        try:
            test_ids = SSApi.get_tasks(hash_url[1])
            test_meta = SSApi.get_meta(hash_url[1])
            await message.answer(
                f"""üìò <b>{test_meta[0]}</b>\nüìù {test_meta[1]}\n\n‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–π: {len(test_ids)}\nüÜî –ö–æ–¥ —Ç–µ—Å—Ç–∞: {hash_url[1]}""",
                parse_mode="HTML",
                reply_markup=skysmarthack.buttons.ButtonClient)

        except Exception as e:
            await message.answer(
                f"""‚≠ï <b>–î–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.</b>""",
                parse_mode="HTML")

    elif message["text"] not in commands_list:
        await message.answer(
            f"""üñáÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç SkySmart</b>""",
            parse_mode="HTML")


@dp.callback_query_handler(text="get_answers_button")
async def get_answers_callback(message: types.Message):
    await logAction(get_answers_callback, True, message)
    chat_id = message["message"]["chat"]["id"]
    message_content = message["message"]["text"]
    hash_url = (True, message_content[-10:])
    user_register = userRegister(str(message["from"]["id"]))
    if hash_url[0] and user_register:
        cursor.execute(f"""SELECT available_answers FROM users WHERE telegram_id = ?""", (str(message["from"]["id"]),))
        available_answers = cursor.fetchone()
        if int(available_answers[0]) > 0:
            answer_obj = TaskAnswerObject(hash_url[1])
            full_answers = answer_obj.get_answers()
            for i in range(len(full_answers)):
                task_dict = full_answers[i]
                await bot.send_message(chat_id=chat_id, text=f"‚úèÔ∏è <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{i+1}</b>\n{task_dict['full_q']}\n\nüìå <b>–û—Ç–≤–µ—Ç:\n{' '.join(task_dict['answer'])}</b>",
                                     parse_mode="HTML")
            else:
                try:
                    cursor.execute("UPDATE users SET available_answers = available_answers - 1 WHERE telegram_id = ?", (str(message["from"]["id"]),))
                    bot_db.commit()
                except:
                    pass
        else:
            await bot.send_message(
            chat_id=chat_id,
            text=f"‚ÅâÔ∏è <b>–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç—ã.</b>\n\nüîë –ê–∫—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–º–æ–∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /promo\nüí≥ –ò–ª–∏ –∫—É–ø–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /buy_answers",
            parse_mode="HTML")
    else:
        await bot.send_message(chat_id=chat_id,
                               text=f"‚ùå <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –≤ @skysmarthack</b>",
                               parse_mode="HTML")


if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
